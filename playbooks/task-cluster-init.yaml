---
- hosts: all
  vars_files:
    - vars/main.yml
  tasks:
  - name: check docker install
    shell: "which docker &> /dev/null && echo 1 || echo 0"
    register: is_docker

  - debug: var=is_docker.stdout verbosity=0

  - name: include install-docker.yml
    include_tasks: tasks/install-docker.yml
    when:
      - is_docker.stdout == "0"

  - name: check kubeadm install
    shell: kubeadm version &> /dev/null && echo 1 || echo 0
    register: is_kubeadm

  - debug: var=is_kubeadm.stdout verbosity=0

  - name: include install-kubeadm.yml
    include_tasks: tasks/install-kubeadm.yml
    when:
      - is_kubeadm.stdout == "0"

- hosts: kubeadm-master
  vars_files:
    - vars/main.yml
  tasks:
  - name: check images
    shell: docker images | grep -q kube-apiserver && echo 1 || echo 0
    register: is_kube_images
  - debug: var=is_kube_images.stdout verbosity=0
  - block:
    - name: get  kubeadm config images list
      shell: kubeadm config images list --kubernetes-version {{kubeadm_version}}
      register: kubeadm_images

    - debug: var=kubeadm_images.stdout_lines verbosity=0

    - name: save images
      shell: echo "{{item}}" >> /tmp/images.list
      with_items: "{{kubeadm_images.stdout_lines}}"

    - name: update images
      shell: |
        sed -i 's#k8s.gcr.io#registry.cn-hangzhou.aliyuncs.com/google_containers#g'  /tmp/images.list

    - name: cat /tmp/images.list
      shell: cat /tmp/images.list | sort -n | uniq
      register: images

    - debug: var=images.stdout_lines verbosity=0

    - name: docker pull images
      shell: docker pull "{{item}}"
      with_items: "{{images.stdout_lines}}"
    when:
      - is_kube_images.stdout == "0"

  - name: Check if kubeadm has already run
    stat:
      path: "/etc/kubernetes/pki/ca.key"
    register: kubeadm_ca

  - name: kubeadm init
    shell: |
      kubeadm  init \
      --apiserver-advertise-address={{ inventory_hostname }} \
      --apiserver-bind-port=6443 \
      --kubernetes-version={{kubeadm_version}} \
      --pod-network-cidr={{pod_network_cidr}} \
      --service-cidr={{service_cidr}} \
      --service-dns-domain={{service_dns_domain}} \
      --image-repository=registry.cn-hangzhou.aliyuncs.com/google_containers \
      --ignore-preflight-errors=swap
    when: not kubeadm_ca.stat.exists
    run_once: yes
    register: init_cluster
  - debug: var=init_cluster verbosity=0

  - name: Create Kubernetes config directory
    file:
      path: ".kube/"
      state: directory

  - name: Copy admin.conf to Home directory
    when: init_cluster is succeeded
    copy:
      src: "/etc/kubernetes/admin.conf"
      dest: ".kube/config"
      owner: "{{ ansible_user | default(ansible_user_id) }}"
      group: "{{ ansible_user | default(ansible_user_id) }}"
      mode: 0755
      remote_src: true

  # network
  - name: Create Kubernetes addon directory
    file:
      path: "{{ network_dir }}"
      state: directory

  - name: get flannel.yml 
    template: 
      src: templates/flannel.yml.j2
      dest: "{{network_dir}}/flannel.yml"

  - name: "Create {{ network }} network daemonset"
    shell: kubectl apply  -f {{ network_dir }}/
    run_once: true


- hosts: kubeadm-nodes
  vars_files:
    - vars/main.yml
  tasks:

  - name: Check if kubelet.conf exists
    stat:
      path: "/etc/kubernetes/kubelet.conf"
    register: kubelet_conf
  
  - name: get token
    shell: kubeadm token list | grep -v TOKEN | awk -F" "  '{print $1}'
    delegate_to: "{{ groups['kubeadm-master'][0] }}"
    register: str_token
  - debug: var=str_token.stdout verbosity=0

  - name: get ca hash
    shell: openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'
    delegate_to: "{{ groups['kubeadm-master'][0] }}"
    register: ca_cert_hash
  - debug: var=ca_cert_hash.stdout verbosity=0  

  
  - name: Join to Kubernetes cluster
    when: not kubelet_conf.stat.exists
    shell: |
      kubeadm join {{ groups['kubeadm-master'][0] }}:6443  --token {{ str_token.stdout }} \
                   --discovery-token-ca-cert-hash sha256:{{ca_cert_hash.stdout}}
                             
  - name: check cluster
    shell: kubectl get nodes
    delegate_to: "{{ groups['kubeadm-master'][0] }}"
    register: nodes_infos
  - debug: var=nodes_infos
    retries: 5
    delay: 2 